# by F.C.
#
# Override sysctl settings.
# See also the README file in this folder.
#
# To reload all configuration files reboot or execute:
#
#    sysctl --system
#
# The --pattern option can be used to filter the parameters
# which match the supplied extended regular expression (it
# can be used for both printing and setting values); e.g.
# to only reload system net values, type:
#
#    sysctl --system --pattern 'net.*'
#
# NOTE: Some sysctl parameters may depend on kernel modules
#       which in turn might not be loaded. If the required
#       modules are not loaded after a reboot, the related
#       parameters will be silently not applied.
#
# References:
# - https://wiki.archlinux.org/index.php/sysctl
# - https://www.kernel.org/doc/Documentation/sysctl/



# -----------------------------------------------------------
# SYSTEM - SECURITY OPTIONS AND FILESYSTEM LIMITS
# -----------------------------------------------------------

# Restore previous behaviour where all users can run 'dmesg'.
# For maximum security comment this and use command 'sudo dmesg'.
kernel.dmesg_restrict = 0

# Hide exposed kernel pointers (default 0). Such pointers provide
# an easy target for kernel vulnerabilities, since they reveal the
# locations of structures containing triggerable function pointers.
# Pointers are still visible for a user with CAP_SYSLOG capability
# (see "capsh --print" and https://lwn.net/Articles/420403/).
kernel.kptr_restrict = 1

# Enable all functionalities of the magic "SysRq" key. To disable
# all functionalities set it to 0; to allow only some of them see
# https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html.
# Note: Apple keyboards (on Mac PC and MacBook laptops) lack the
# PrtScr/SysRq button; we can remap the CD Eject key to it (see
# "/etc/local.d/20-macbook.start") or we can use an USB keyboard.
kernel.sysrq = 1

# Maximum size in bytes of a single IPC message queue (default
# 16384). Such default might be not enough for a database Linux
# server, see the book: "Performance tuning for IBM Security
# Directory Severs". See also the ipc_namespaces(7) man page.
#kernel.msgmnb = 65536

# Maximum allowable size in bytes of any single message in
# a message queue (default 8192). Must not exceed the size
# of the queue (msgmnb). The default might be not enough
# for a database Linux server, see above.
#kernel.msgmax = 65536

# Total amount of shared memory pages that can be used system
# wide (a page is 4096 bytes and the default amount of shared
# memory pages is unlimited). A good setting is the 40% of the
# size of physical memory (in pages), but might more complex
# than that. Useful with database servers, see above.
#kernel.shmall = 1258291

# Maximum size (in bytes) of a single shared memory segment
# allowed by the kernel (default unlimited). A good setting
# is half the size of physical memory in bytes, but might more
# complex than that. Useful with database servers, see above.
#kernel.shmmax = 2147483648

# Maximum number of file descriptors (files-handles) the kernel
# can allocate for the entire system (default unlimited). Note:
# the maximum file-handles a process can allocate (i.e. the max
# number of file the process can open, see ulimit -n) depends on
# fs.nr_open (default 1073741816) and the "nofile" hard limit in
# /etc/security/{limits.d/*,limits.conf}. Useful with databases.
# With kernel CONFIG_MEMCG=y set this to 9223372036854775807, and
# fs.nr_open to 1073741816 (maximum, automatically set with systemd,
# see also systemd commit a8b627aaed409a15260c25988970c795bf963812).
fs.file-max = 9223372036854775807
fs.nr_open = 1073741816

# Increase inotify limits (default 128 8192 16384), many applications
# need them (KDE5/PLASMA, MonoDevelop, VSCode, ...). NOTE: each inotify
# instance should have at least 64 watches available. On some distros
# these limits are set (to congruent values) in /usr/lib/sysctl.d/*.
fs.inotify.max_user_instances = 1024
fs.inotify.max_user_watches = 524288
fs.inotify.max_queued_events = 16384



# -----------------------------------------------------------
# SYSTEM - TUNING MEMORY MANAGEMENT
# -----------------------------------------------------------

# Improve swapping and freezes on out-of-memory (OOM) condition:
#
#  - "vm.swappiness"
#    Tendency to use swap:
#      0 swap is disabled (in older kernels the kernel would swap
#        only to avoid an out of memory condition, but in later
#        versions this is achieved by setting swappiness to 1);
#      1 kernels version 3.5 and over, kernels version 2.6.32-303
#        and over: minimum swapping without disabling it entirely;
#     10 value recommended to improve performance when sufficient
#        memory exists in a system (good for desktop and laptops);
#     60 default value (good for servers);
#    100 swap aggressively (swap often).
#
# - "vm.vfs_cache_pressure"
#   Tendency to reclaim swap space back to memory:
#     50 gives a balance between the filesystem cache and the app
#        cache so both apps and files have reasonable access times;
#    100 default value;
#   >100 prefer discarding filesystem cache over application cache,
#        slowdown all applications that uses the filesystem, because
#        filesystem data must be reloaded continuosly from the disk.
#   So, increasing vfs_cache_pressure significantly beyond 100 may
#   have negative performance impact. In general, you should tweak
#   vfs_cache_pressure only if you have performance issues related
#   to disk caching.
#
# - "vm.min_free_kbytes"
#   Controls the amount of memory that is kept free for use by
#   special reserves including “atomic” allocations (which cannot
#   wait for reclaim). This should not normally be lowered unless
#   the system is very carefully tuned for memory usage (normally
#   useful for embedded rather than server applications). If the
#   message "page allocation failure" and some "stack traces" are
#   frequently seen in logs, min_free_kbytes could be increased
#   until the errors disappear. The default value depends on the
#   amount of RAM.
#
# - "vm.dirty_background_ratio"
#   The percentage of total system memory that can be filled with
#   dirty pages waiting to be written to disk by pdflush. Triggering
#   this WILL NOT block new writes. In recent kernels there is also
#   the "dirty_background_bytes" counterpart (i.e. the amount of
#   dirty memory, in bytes, at which the background kernel flusher
#   threads will start writeback). Note that dirty_background_ratio
#   and dirty_background_bytes cannot be both assigned: when  one is
#   set to a value, the other is automatically set to 0. We should
#   set dirty_background_bytes based on the throughput of used HDD,
#   SSD, USBDISK and I/O subsytems, to ensure that an "fsync" will
#   never takes more than 250ms. For example, for an SSD with a min
#   throughput of 160MB/sec, dirty_background_bytes should be set
#   to about 40MB, so fsync will takes at most ~250ms.
#
# - "vm.dirty_ratio"
#   The percentage of total system memory at which ALL dirty pages
#   must be commited to disk. Writes after this will block until
#   pdflush is done. With lot of RAM even the 1% can be too much.
#   A further issue is that a ratio of 5% is the effective minimum
#   in older kernels. In recent kernels "dirty_bytes" is available.
#   As above, dirty_ratio and dirty_bytes cannot be both assigned:
#   when one is set to a value, the other is automatically set to 0.
#
# See:
# https://stackoverflow.com/questions/27900221
# https://unix.stackexchange.com/questions/640802
# https://bbs.archlinux.org/viewtopic.php?id=184655

# **********************************************************
#    NOW WE ARE USING ONLY ZRAM WITHOUT ANY PHYSICAL SWAP
# VM PARAMETERS ARE SET IN /etc/local.d/90-zram.{start,stop}
# **********************************************************

# Example of configuration with swap on disk (without zram):
#vm.dirty_ratio = 10
#vm.dirty_background_ratio = 5
#vm.dirty_expire_centisecs = 2000
#vm.dirty_writeback_centisecs = 1000
#vm.swappiness = 10
#vm.vfs_cache_pressure = 70

# Avoid freeze on OUT-OF-RAM condition. To fix this problem we need
# to set the following parameter to something around 6% of the total
# physical RAM (see MemTotal in /proc/meminfo) divided by the number
# of cores in the computer (note that this is a per-core setting):
#
#     8 GiB  =>  ( 8059008 KiB * 6 / 100) / 4  =>  120886 KiB
#    12 GiB  =>  (12269592 KiB * 6 / 100) / 4  =>  184044 KiB
#
# 393216 is reported as min value that don't causes a freeze on OOM
# (see https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1833281).
# Some people suggest using 1% of system RAM or 4 GB, whichever is
# smaller, while other people suggest these other settings:
#
#    vm.min_free_kbytes = 262144
#    vm.admin_reserve_kbytes=131072
#    vm.user_reserve_kbytes=262144
#
# If these settings are not enough to mitigatea OOM conditions we
# can try the earlyoom daemon (https://github.com/rfjakob/earlyoom)
# or the new systemd OOM daemon (see /etc/systemd/oomd.conf). At the
# moment, I want just to try if 128MB of free bytes are enough.
vm.min_free_kbytes = 131072

# Boost vm.max_map_count (maximum number of memory maps per process)
# for better performances in games and other applications. NOTE THAT
# THIS VALUE SHOULD BE CHOSEN IN ACCORDANCE WITH THE SYSTEM'S RAM (see
# https://memgraph.com/docs/database-management/system-configuration).
# The following setting is for a Linux system with 64..128 GB of RAM.
vm.max_map_count=1048576

# Suppress the system-wide task dump (default = 1)
# to avoid a performance penalty in OOM conditions.
vm.oom_dump_tasks = 0



# -----------------------------------------------------------
# SYSTEM - OTHER SETTINGS
# -----------------------------------------------------------

# Coredumps are now handled by systemd, that logs the core dump
# references (including a backtrace if possible) to the journal
# and stores the dumps in "/var/lib/systemd/coredump". See:
#
# - files     "/usr/lib/sysctl.d/50-coredump.conf"
#             "/etc/systemd/coredump.conf"
#
# - man pages "coredumpctl"
#             "systemd-coredump"
#             "coredump.conf"
#             "core"
#
# - web page  "https://wiki.archlinux.org/index.php/Core_dump"
#
# The following setting revert to the old behaviour (deprecated,
# but still needed with any Linux distro that don't use systemd),
# see http://www.idimmu.net/2013/06/21/enable-linux-core-dump
# DO NOT ENABLE SUCH SETTINGS IF THE DISTRO USES SYSTEMD
#kernel.core_pattern = %e.coredump.%s
#kernel.core_uses_pid = 1

# Enable eject of CDs/DVDs using the button on the unit.
# Not required with the KDE5 / PLASMA desktop environment.
#dev.cdrom.autoclose = 0
#dev.cdrom.lock = 0

# Ebuild of sys-process/iotop reports that, since Linux
# 5.14, sysctl "kernel.task_delayacct" should be enabled
# (this happens despite CONFIG_TASK_DELAY_ACCT=y in kernel
# config, see https://superuser.com/questions/610581). But
# unfortunately, enabling it permanently affects system
# performances, so better to enable/disable it around
# iotop using an "alias" in shell settings.
#kernel.task_delayacct = 1



# -----------------------------------------------------------
# NETWORKING - SECURITY OPTIONS
# -----------------------------------------------------------

# Enables packet forwarding (required for virt0). NOTE:
# already enabled by firewalld if masquerading is enabled.
#net.ipv4.ip_forward = 1

# Disables packet forwarding (NOT APPLIED, see above).
#net.ipv4.ip_forward = 0
#net.ipv4.conf.all.forwarding = 0
#net.ipv4.conf.default.forwarding = 0
#net.ipv6.conf.all.forwarding = 0
#net.ipv6.conf.default.forwarding = 0

# Enable TCP SYN cookie protection (default with recent kernels).
# Help to protect the system against SYN flood attacks. Note that
# it is kicked in only when net.ipv4.tcp_max_syn_backlog is reached.
# Some other SYN parameters must be tuned: tcp_syn_retries tells the
# kernel how many times to try to retransmit the initial SYN packet
# for an active TCP connection attempt, while tcp_synack_retries tells
# the kernel how many times to retransmit the SYN,ACK reply to an SYN
# request. In other words, such parameters tell the system how many times
# to try to establish a passive TCP connection that was started by another
# host, see https://www.frozentux.net/ipsysctl-tutorial/ipsysctl-tutorial.html
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 3
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_max_syn_backlog = 1024

# Do not accept source routing. When source routed packets are allowed,
# an attacker can forge the source IP address of connections by saying
# how a packet should be routed across the Internet, abusing a trust
# relationship or getting around the TCP Wrapper-style access lists.
# Source routing on today's Internet network is not really needed.
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Do not send ICMP redirects. They are not required for non-routing
# hosts and for routers on stable networks where hosts already have
# the correct routes set up (required only with alternate routes).
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Do not accept insecure ICMP Redirects (default = 1), to not
# permit outsiders alter the routing table. A cracker can use
# ICMP redirects to trick your host into sending your packets
# through a machine it controls to perform a man-in-the-middle
# attack. Must never be enabled on well configured router.
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Also do not accept secure ICMP redirects (default = 1), i.e.
# ICMP redirects that come only from a router that is currently
# set up as a default gateway. Secure ICMP redirects should only
# be enabled if you have multiple routers on your network. If your
# network is fairly static and stable, better leave these disabled.
#net.ipv4.conf.all.secure_redirects = 0
#net.ipv4.conf.default.secure_redirects = 0

# Enable the kernels reverse path filtering mechanism (default): the kernel
# will perform source validation of the packet's received from all network
# interfaces, protecting the host from attackers that are using ip spoofing
# methods to do harm. The 3 values that can be set for the key rp_filter are:
#
# 0 - disabled, any packet is forwarded to the destination network;
# 1 - strict mode (RFC 3074) - each incoming packet is tested against the
#     routing table and the packet is dropped if the interface that the
#     packet is received on is not the best return path for the packet;
# 2 - loose mode (RFC 3074) - each incoming packet tested against the
#     routing table and the packed is dropped if the source address is
#     not routable through any interface. This allows for asymmetric
#     routing where the return path may not be the same as the source path.
#
# Can be a problem for routers on a network that has dynamically changing routes.
# However on firewall/routers that are the single connection between networks, this
# automatically provides spoofing protection without network ACLs. Value 2 is more
# appropriate for hosts that have multiple links with routes to the same networks
# (a client with a Wi-Fi and Ethernet both connected to the internet), see commit
# https://github.com/systemd/systemd/commit/230450d4e4f1f5fc9fa4295ed9185eea5b6ea16e
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2

# Log martian packets (spoofed packets, source routed packets, redirect packets),
# i.e. store syslog messages when packets are received with illegal addresses.
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Fast fail FIN connections which are useless.
net.ipv4.tcp_fin_timeout = 10

# Change TCP keepalive parameters. TCP keepalive is a mechanism for TCP
# connections that help to determine whether the other end has stopped
# responding or not. TCP will send the keepalive probe contains null data
# to the network peer several times after a period of idle time, and if
# the peer does not respond, the socket will be closed automatically. By
# default, the TCP keepalive process waits for two hours (7200 secs) for
# socket activity before sending the first keepalive probe, and then it
# resend the probe every 75 seconds. As long as there is TCP/IP socket
# communications going on and active, no keepalive packets are needed.
# With the following settings, your application will detect dead TCP
# connections after 120 seconds (60s + 6 * 10s).
net.ipv4.tcp_keepalive_time = 60
net.ipv4.tcp_keepalive_intvl = 10
net.ipv4.tcp_keepalive_probes = 6

# Don't relay bootp (default).
net.ipv4.conf.all.bootp_relay = 0

# Don't proxy arp for anyone (default).
net.ipv4.conf.all.proxy_arp = 0

# Turn on the tcp_timestamps (default on recent kernels). Despite suggestion
# about security and performance gained turning it off, don't do that: Without
# timestamp the TCP Protection Against Wrapped Sequence numbers (PAWS) mechanism
# will not work. Without TCP timestamps, the ACKs received by the sender cannot
# be known to have come from the original transmission or the retransmission.
# Therefore when retransmissions occur, RTT cannot be determined until an ACK
# is received with no retransmission. This can result in pathological behavior
# when many retransmissions are happening, as the sender may slow down to the
# minimum sending rate of 1 packet per 120 seconds! Required at gigabit speed.
net.ipv4.tcp_timestamps = 1

# Ignore echo broadcast requests to prevent being part of smurf attacks (default).
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Enable bad error message protection, i.e. ignore bogus icmp errors (default).
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Set the allowed TCP/UDP local port range (default 32768 - 60999). These
# numbers should have different parity, i.e. one even and one odd values.
net.ipv4.ip_local_port_range = 30000 65535

# Set the reserved TCP/UDP port range for know third party applications.
# List of comma separated ranges (e.g. from 2000 to 2100 + 4321 + 5555).
#net.ipv4.ip_local_reserved_ports = 2000-2100,4321,5555

# Enable a fix for RFC1337 - Protect against tcp time-wait
# assassination hazards (drop RST packets for sockets in the
# time-wait state). Not widely supported outside of Linux.
net.ipv4.tcp_rfc1337 = 1

# It is recommend to set a RANDOM NUMBER between 60 and 100 here,
# because many attackers use the TTL (time to live) as a parameter
# for profiling the operating system. It is a very simple way to
# slightly increase the networking security.
net.ipv4.ip_default_ttl = 95

# Required with kernel < 4.7 Mitigate a vulnerability in tcp stack implementation. See
# https://blogs.akamai.com/2016/08/vulnerability-in-the-linux-kernels-tcp-stack-implementation.html
#net.ipv4.tcp_challenge_ack_limit = 1073741823

# Do not auto-configure IPv6.
# Note that set "net.ipv6.conf.all.accept_ra" off (i.e. 0) is quite dangerous and
# should not be done, as RAs are necessary for indication of on-link and off-link
# for the prefix (as per RFC5942), as well as automated configuration of a number
# of other parameters, such as MTU, Neighbor Discovery timeouts etc. Set it to 0
# might appear to work but later you may find you're missing packets because they
# hit a fragmentation point or a failover router is used. Also it breaks pings.
#net.ipv6.conf.all.autoconf = 0
#net.ipv6.conf.default.autoconf = 0

# Enable support for dynamic addresses (default 0 -> disabled).
# Value 1 enabled it, value > 1 enable and store changes in log.
net.ipv4.ip_dynaddr = 2



# -----------------------------------------------------------
# NETWORKING - TUNING PERFORMANCE
# -----------------------------------------------------------

# Use the H-TCP congestion control. NOTE: many Internet sites suggest
# TO USE GOOGLE "BBR" BUT IT CAUSES A BIG DROP IN LAN TRANSFERT SPEED!!
# Set tcp_notsent_lowat to 16384 to ensure HTTP/2 prioritization works
# optimally. See also https://github.com/systemd/systemd/issues/9725
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = htcp
net.ipv4.tcp_notsent_lowat = 16384

# Turn on the tcp_window_scaling (default on recent kernels).
net.ipv4.tcp_window_scaling = 1

# Increase the memory dedicated to network interfaces (socket input
# and output queues). By default, to save memory resources, the Linux
# network stack is not configured for high speed large file transfer.
# See https://cromwell-intl.com/open-source/performance-tuning/tcp.html
net.core.rmem_max = 8388608
net.core.wmem_max = 8388608
net.core.rmem_default = 262144
net.core.wmem_default = 262144
net.ipv4.tcp_rmem = 8192 262144 8388608
net.ipv4.tcp_wmem = 8192 262144 8388608
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192

# The tcp_mem variabls define how the TCP stack should behave when it comes
# to memory usage. This is measured in units of pages (4096 bytes). The first
# value tells the kernel the low threshold: below this point, the TCP stack do
# not bother at all about putting any pressure on the memory usage by different
# TCP sockets. The second value tells the kernel at which point to start pressuring
# memory usage down. The final value tells the kernel how many memory pages it may
# use maximally: if this value is reached, packets start getting dropped until we
# reach a lower memory usage. This value includes all TCP sockets currently in use.
# Set it to 2 * maximum value for tcp_[rw]mem * maximum number of running TCP network
# applications (or spawned connections) divided by 4096 bytes per page. With 256
# connections simultaneously: max(tcp_wmem) * 2 * 256 / 4096 -> 1Mpage (4GB max).
net.ipv4.tcp_mem = 1048576 1048576 1048576

# Same as above but for UDP sockets. NOTE: it might be
# better to leave Linux scale such values based on RAM.
#net.ipv4.udp_mem = 65536 131072 262144

# Set the maximum number of incoming connections (default 128 on kernel-4 and 4096
# on kernel-5), i.e. the upper limit on how many connections the kernel will accept.
# This improve performances in servers with high traffic. Note: increasing this value
# too much may only may cause as slow processing rate (e.g. a single threaded blocking
# server) or insufficient number of worker threads/processes.
#net.core.somaxconn = 1024

# Increasing the size of the receive packet queue (default 1000).
# The received frames will be stored in this queue after taking
# them from the ring buffer on the network card. Increasing this
# value for high speed cards may help prevent losing packets. Note:
# in realtime network applications (like SIP routers), this option
# needs fast CPUs otherwise the data in the queue will be out of date.
net.core.netdev_max_backlog = 4096
net.core.netdev_budget = 600

# Increase the maximum amount of option memory buffers.
net.core.optmem_max = 40960

# Increase the tcp-time-wait buckets pool size (maximum number
# of sockets in 'TIME_WAIT' state) to prevent simple DOS attacks.
# After reaching this number the kernel will start destroying
# the socket that are in the TIME_WAIT state.
net.ipv4.tcp_max_tw_buckets = 360000

# Sets whether TCP should reuse an existing connection in the TIME_WAIT
# state for a new outgoing connection if the new timestamp is bigger than
# the most recent timestamp recorded for the previous connection. This helps
# avoid from running out of available network sockets. Anyway, don't recycle
# them (recycle can break clients behind NAT). Note that "tcp_tw_recycle" has
# been removed in kernel 4.12. Note: a recent SuSe Linux note suggest to set
# "tcp_tw_reuse" to 0, see https://www.suse.com/support/kb/doc/?id=000019286
net.ipv4.tcp_tw_reuse = 0

# Limit number of orphans, each orphan can eat up to 8M (max wmem) of unswappable memory.
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 0

# Limit the maximum memory used to reassemble IP fragments (CVE-2018-5391). There
# can be some impact on performance though, due to 'ipfrag_high_thresh' being set
# to 262144 bytes, as this way only two 64K fragments can fit in the reassembly
# queue at the same time. Also, there is a risk of breaking applications that rely
# on large UDP packets. Recent kernels should be not affected by this vulnerability.
#net.ipv4.ipfrag_low_thresh = 196608
#net.ipv6.ip6frag_low_thresh = 196608
#net.ipv4.ipfrag_high_thresh = 262144
#net.ipv6.ip6frag_high_thresh = 262144

# By default TCP saves various connection metrics in the route cache
# when the connection is closed, so that connections established in the
# near future can use these to set initial conditions. Usually, this
# increases performance, but may sometimes cause performance degradation.
# See https://github.com/ton31337/tools/blob/master/tcp_slow_start.md
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Increase size of RPC datagram (AF_UNIX sockets)
# queue length (default 512 on recent kernels).
net.unix.max_dgram_qlen = 512

# Don't allow the arp table to become bigger than this (default 1024).
net.ipv4.neigh.default.gc_thresh3 = 2048

# Tell the gc when to become aggressive with arp table cleaning. Adjust this
# based on size of the LAN. 1024 is suitable for most /24 networks (defaut 512).
net.ipv4.neigh.default.gc_thresh2 = 1024

# Adjust where the gc will leave arp table alone - set to 32 (default 128).
net.ipv4.neigh.default.gc_thresh1 = 32

# Adjust to arp table gc to clean-up more often (default).
net.ipv4.neigh.default.gc_interval = 30

# Increase TCP queue length (default 64, 101).
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# Disable Explicit Congestion Notification (ECN). Default value
# is 2 ("server mode ECN" that enable ECN if, and ONLY if, the
# other side requests it during the initial TCP handshake).
#net.ipv4.tcp_ecn = 0

# How many times to retry killing an alive TCP connection (default).
net.ipv4.tcp_retries2 = 15
net.ipv4.tcp_retries1 = 3

# Avoid falling back to slow start after a connection goes idle
# keeps our cwnd large with the keep alive connections (kernel > 3.6).
net.ipv4.tcp_slow_start_after_idle = 0

# Enable TCP Fast Open (extension to the TCP that helps reduce network
# latency by enabling data to be exchanged during the initial TCP SYN.
# This requires Linux 3.7.1 kernel or higher. NOTE: programs and device
# that cannot use TFO fallback to the traditional TCP handshake.
# BEWARE: some firewalls do not like TFO!
net.ipv4.tcp_fastopen = 3

# Enable MTU probing when an ICMP black hole is detected. Longer MTUs give
# better performance, but worse reliability (a lost packet means more data
# to be retransmitted and many routers can't deliver very long packets).
net.ipv4.tcp_mtu_probing = 1

# Turn on the tcp_sack (default on recent kernels).
net.ipv4.tcp_sack = 1

# This should be on because of sack (this is a legacy
# option, it has no effect anymore on recent kernels).
net.ipv4.tcp_fack = 1

# Increase the TCP Re-Ordering value in kernel (default 3) to avoid that a packet
# reordering in a fast network could end up being interpreted as a packet loss.
net.ipv4.tcp_reordering = 5

# Ensure that immediatly subsequent connections use the new values.
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1

# THE END #
