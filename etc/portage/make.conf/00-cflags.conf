# by F.C.
# For optimal performance, use flags setting appropriate for your CPU.
#
# NOTE: if you experience strange issues with a package, it may be due to
# bugs in gcc's optimizations. Please test the package (and the libraries
# it uses) at default optimizations before reporting errors to developers.
# You can also try to build the affected packages and libraries with CLang.
#
# MOST IMPORTANT FLAGS:
#
# -Ox
#  Optimization flags: -O2 is the recommended level of optimization for
#  system packages. SSE or AVX may be utilized at this level but no YMM
#  registers will be used unless -ftree-vectorize is also enabled.
#
# -ftree-vectorize (-ftree-loop-vectorize and -ftree-slp-vectorize)
#  Controls whether the compiler can automatically take advantage of
#  vector instructions for processors that support them and can offer
#  higher performance when used with algorithmic-intensive tasks such
#  as multimedia applications. Compiler autovectorization is absolutely
#  essential these days if you intend to make your cpus work at least
#  a bit as how they were intended to be used. Enabled by default with
#  -O2 (GCC >= 12, CLang >= 3.4) or -O3 (GCC <= 11, CLANG <= 3.3).
#
# -march=type
#  means to take full advantage of the ABI and instructions for the
#  particular CPU; this will break compatibility with older CPUs.
#
# -mcpu=name or -mtune=name
#  means optimize code for the particular CPU (with or without breaking
#  compatibility with other CPUs). These options strongly depend on the
#  architecture, for example -mcpu is deprecated on x86* (being a synonym
#  for -mtune) but not on ARM (where it's a sum of -march and -mtune). On
#  x86* always use -march for best performance, on ARM always use -mcpu
#  (unless you care for backwards compatibility), or set -march=native
#  (and remove -mtune). **** WARNING: DO NOT USE -march=native (NOR
#  -mtune=native) IF YOU WANT TO USE DISTCC TO BUILD PACKAGES ****
#
# To see what GCC detects as "native" for the system try with the
# following commands:
#
#   gcc -c -Q -march=native --help=target
#   gcc -### -march=native /usr/include/stdlib.h
#   gcc -v -E -x c /dev/null -o /dev/null -march=native 2>&1 | grep /cc1 | grep mtune
#   gcc -march=native -E -v - </dev/null 2>&1 | grep cc1
#
# See also:
#   https://wiki.gentoo.org/wiki/Safe_CFLAGS
#   https://wiki.gentoo.org/wiki/GCC_optimization
#   https://forums.gentoo.org/viewtopic-t-1117800-start-0.html
#   resolve-march-native (from app-misc/resolve-march-native)
#   cpuid2cpuflags (from app-portage/cpuid2cpuflags)
#   /lib64/ld-linux-x86-64.so.2 --help
#   /etc/portage/env/debug.conf
#
# Examples:
#   AMD Ryzen 5900X:   -march=znver3 (GCC >= 11) or znver2 (GCC 10).
#   Intel Ivy Bridge:  -march=ivybridge
#   Both CPUs above:   -march=x86-64-v2
#   Generic x86_64:    -march=x86-64
#
# NOTE: x86-64-v* needs GCC >= 11 or LLVM/Clang >= 12 (previous
# compiler versions generate build errors with x86-64-v*).
#
# If your gcc supports it, you can add -frecord-gcc-switches to all *FLAGS
# in order to enable *FLAGS ignorance checking for ebuilds. NOTE: this check is
# enabled only if every one of these variables contains -frecord-gcc-switches,
# since otherwise the check could result in false positive results.

#CPU_ARCH="native"
CPU_ARCH="x86-64-v3"
COMMON_FLAGS="-march=${CPU_ARCH} -O2 -pipe"

# Compiler flags used to build C/C++ code.
CFLAGS="${COMMON_FLAGS}"
CXXFLAGS="${COMMON_FLAGS}"

# Compiler flags used to build Fortran code.
FFLAGS="${COMMON_FLAGS}"
FCFLAGS="${COMMON_FLAGS}"

# Compiler flags used to build ADA code.
ADAFLAGS="${COMMON_FLAGS}"

# Compiler flags used for C programs built as modules from Go.
CGO_CFLAGS="${COMMON_FLAGS}"
CGO_CXXFLAGS="${COMMON_FLAGS}"
CGO_LDFLAGS="${LDFLAGS}"

# GO 1.18 introduced 4 architectural levels for AMD64. Each level differs in the
# set of x86 instructions that the compiler can include in the generated binaries:
#  * v1 (default): generates instructions that all 64-bit x86 processors can execute;
#  * v2: all v1 instructions + CMPXCHG16B LAHF SAHF POPCNT SSE3 SSE4.1 SSE4.2 SSSE3;
#  * v3: all v2 instructions + AVX AVX2 BMI1 BMI2 F16C FMA LZCNT MOVBE OSXSAVE;
#  * v4: all v3 instructions + AVX512F AVX512BW AVX512CD AVX512DQ AVX512VL.
# To get the x86-64 microarchitecture level, look for the above flags in /proc/cpu
# (note they are in lowercase) or see https://github.com/HenrikBengtsson/x86-64-level.
# Performances should improve when a higher minimum microarchitecture is selected,
# but this might not be true in all cases. Benchmark your performance-critical code.
# To list go related packages, type: 'emerge -pv @golang-rebuild' and 'equery d go'
# NOTE: for the moment we keep the 'v2' level for go packages.
GOAMD64="v2"
#GOAMD64="v3"

# RUST -O3 is normally safe, as undefined behavior isn't really a thing for safe rust.
# See: https://www.reddit.com/r/Gentoo/comments/15n73ux
#      https://rust-lang.github.io/packed_simd/perf-guide/target-feature/rustflags.html
#      https://doc.rust-lang.org/rustc/codegen-options/index.html
# To list available target-cpus, type: 'rustc --print target-cpus'
# To list available built-in targets, type 'rustc --print target-list'
# To list rust related packages, type: 'emerge -pv @rust-rebuild' and 'equery d rust'
#RUSTFLAGS="-C target-cpu=${CPU_ARCH} -C opt-level=3 -C strip=symbols"
RUSTFLAGS="-C target-cpu=${CPU_ARCH}"
