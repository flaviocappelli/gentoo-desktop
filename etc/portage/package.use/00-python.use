# by F.C.

# PYHON UPGRADE 3.12 -> 3.13
# ==========================

# 1) DEFERRING THE UPGRADE. This will enforce Python 3.12 and block
#    any future updates. However, note that this is only a temporary
#    solution and you will need to perform the migration ASAP:
#
        */* PYTHON_TARGETS: -* python3_12
        */* PYTHON_SINGLE_TARGET: -* python3_12

# 2) SAFER UPGRADE PROCEDURE. Add Python 3.13 support to your system
#    first, and only then remove Python 3.12. This involves 3 rebuilds
#    of all affected packages, so it will take some time:
#
#    - First, enable both Python 3.12 and Python 3.13, and run the 1st
#      upgrade (see below):
#
#        */* PYTHON_TARGETS: -* python3_12 python3_13
#        */* PYTHON_SINGLE_TARGET: -* python3_12
#
#    - Then switch PYTHON_SINGLE_TARGET and run the 2nd upgrade:
#
#        */* PYTHON_TARGETS: -* python3_12 python3_13
#        */* PYTHON_SINGLE_TARGET: -* python3_13
#
#    - Finally, switch to the final version and run the 3rd upgrade:
#
#        */* PYTHON_TARGETS: -* python3_13
#        */* PYTHON_SINGLE_TARGET: -* python3_13
#
#      Keep the latest two lines to block the next automatic upgrade
#      to Python 3.14.

# UPGRADE CMDS. The cleanup requires that the old Python is removed
# from the complete dependency trees in batch. If some installed
# packages using the older version are not triaged for the upgrade,
# the package manager will throw dependency conflicts. This makes it
# important that the upgrade is carried via a --deep --changed-use
# @world upgrade, as well as that any stray packages are removed
# prior to it, e.g.:
#
#    emerge --depclean
#    emerge -1avUD @world
#    emerge --depclean
#
# Please note that there may be a transition period (two/three months)
# where both the old and new versions of Python need to be enabled for
# some packages.
